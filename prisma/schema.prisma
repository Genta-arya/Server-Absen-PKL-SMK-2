generator client {
  provider = "prisma-client-js"
}

datasource db {
  // provider          = "mysql"
  provider = "postgresql"
  url      = env("DATABASE_URL")
 
  // shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}

model Kelas {
  id    String @id @default(uuid())
  nama  String
  users User[] @relation("UserKelas")
}

model User {
  id           String    @id @default(uuid())
  nim          String    @unique
  name         String?
  email        String?   @unique
  password     String
  status_login Boolean   @default(false)
  avatar       String?
  role         String    @default("user")
  token        String?
  noHp         String?
  createdAt    DateTime  @default(now())
  Pkl          Pkl[]     @relation("UserPkl")
  CreatedPkl   Pkl[]     @relation("PklCreator")
  Kelas        Kelas[]   @relation("UserKelas")
  Absensi      Absensi[]
  shifts       Shift[]   @relation("UserShift")
  laporan      Laporan[] @relation("UserLaporan")
}

model Shift {
  id        String    @id @default(uuid())
  pklId     String
  pkl       Pkl       @relation("PklShift", fields: [pklId], references: [id], onDelete: Cascade)
  name      String
  jamMasuk  DateTime
  jamPulang DateTime
  absensi   Absensi[]
  users     User[]    @relation("UserShift")
  createdAt DateTime  @default(now())
}

model Foto_laporan {
  id         String   @id @default(uuid())
  laporan_id String
  laporan    Laporan? @relation("LaporanFoto", fields: [laporan_id], references: [id], onDelete: Cascade)
  foto_url   String
}

model Pkl {
  id              String    @id @default(uuid())
  name            String
  alamat          String
  creatorId       String
  creator         User      @relation("PklCreator", fields: [creatorId], references: [id])
  users           User[]    @relation("UserPkl")
  absensi         Absensi[] @relation("PklAbsensi")
  shifts          Shift[]   @relation("PklShift")
  laporan         Laporan[] @relation("PklLaporan")
  isDelete        Boolean?  @default(false)
  link_grup       String?
  tanggal_mulai   DateTime?
  tanggal_selesai DateTime
  status          Boolean   @default(true)
  createdAt       DateTime  @default(now())
}

model Laporan {
  id                   String         @id @default(uuid())
  pkl                  Pkl?           @relation("PklLaporan", fields: [pkl_id], references: [id], onDelete: Cascade)
  pkl_id               String?
  user_id              String?
  user                 User?          @relation("UserLaporan", fields: [user_id], references: [id])
  absensi              Absensi?       @relation(fields: [absensi_id], references: [id])
  absensi_id           String?
  tanggal              DateTime
  nama_instruktur      String?
  pembimbingId         String?
  nama_pekerjaan       String?
  perencanaan_kegiatan String?
  pelaksanaan_kegiatan String?        @db.Text
  catatan_instruktur   String?        @db.Text
  status_selesai       String?        @default("Belum")
  fotos                Foto_laporan[] @relation("LaporanFoto")

  status Boolean?
}

model Absensi {
  id       String  @id @default(uuid())
  pkl_id   String
  pkl      Pkl?    @relation("PklAbsensi", fields: [pkl_id], references: [id], onDelete: Cascade)
  shift_id String?
  shift    Shift?  @relation(fields: [shift_id], references: [id])

  isDelete Boolean?
  user_id  String
  user     User?     @relation(fields: [user_id], references: [id])
  tanggal  DateTime
  hadir    String?
  foto     String?
  gps      String?
  posisi   String?
  pulang   DateTime?
  datang   DateTime?
  status   Boolean?
  Laporan  Laporan[]
}
